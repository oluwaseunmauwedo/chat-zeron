/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsIndexImport } from './routes/settings.index'
import { Route as SettingsPreferencesImport } from './routes/settings.preferences'
import { Route as SettingsAppearanceImport } from './routes/settings.appearance'
import { Route as CCidImport } from './routes/c.$cid'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsPreferencesRoute = SettingsPreferencesImport.update({
  id: '/preferences',
  path: '/preferences',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsAppearanceRoute = SettingsAppearanceImport.update({
  id: '/appearance',
  path: '/appearance',
  getParentRoute: () => SettingsRoute,
} as any)

const CCidRoute = CCidImport.update({
  id: '/c/$cid',
  path: '/c/$cid',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/c/$cid': {
      id: '/c/$cid'
      path: '/c/$cid'
      fullPath: '/c/$cid'
      preLoaderRoute: typeof CCidImport
      parentRoute: typeof rootRoute
    }
    '/settings/appearance': {
      id: '/settings/appearance'
      path: '/appearance'
      fullPath: '/settings/appearance'
      preLoaderRoute: typeof SettingsAppearanceImport
      parentRoute: typeof SettingsImport
    }
    '/settings/preferences': {
      id: '/settings/preferences'
      path: '/preferences'
      fullPath: '/settings/preferences'
      preLoaderRoute: typeof SettingsPreferencesImport
      parentRoute: typeof SettingsImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof SettingsImport
    }
  }
}

// Create and export the route tree

interface SettingsRouteChildren {
  SettingsAppearanceRoute: typeof SettingsAppearanceRoute
  SettingsPreferencesRoute: typeof SettingsPreferencesRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

const SettingsRouteChildren: SettingsRouteChildren = {
  SettingsAppearanceRoute: SettingsAppearanceRoute,
  SettingsPreferencesRoute: SettingsPreferencesRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}

const SettingsRouteWithChildren = SettingsRoute._addFileChildren(
  SettingsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteWithChildren
  '/c/$cid': typeof CCidRoute
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/preferences': typeof SettingsPreferencesRoute
  '/settings/': typeof SettingsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/c/$cid': typeof CCidRoute
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/preferences': typeof SettingsPreferencesRoute
  '/settings': typeof SettingsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteWithChildren
  '/c/$cid': typeof CCidRoute
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/preferences': typeof SettingsPreferencesRoute
  '/settings/': typeof SettingsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/settings'
    | '/c/$cid'
    | '/settings/appearance'
    | '/settings/preferences'
    | '/settings/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/c/$cid'
    | '/settings/appearance'
    | '/settings/preferences'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/settings'
    | '/c/$cid'
    | '/settings/appearance'
    | '/settings/preferences'
    | '/settings/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SettingsRoute: typeof SettingsRouteWithChildren
  CCidRoute: typeof CCidRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsRoute: SettingsRouteWithChildren,
  CCidRoute: CCidRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/settings",
        "/c/$cid"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx",
      "children": [
        "/settings/appearance",
        "/settings/preferences",
        "/settings/"
      ]
    },
    "/c/$cid": {
      "filePath": "c.$cid.tsx"
    },
    "/settings/appearance": {
      "filePath": "settings.appearance.tsx",
      "parent": "/settings"
    },
    "/settings/preferences": {
      "filePath": "settings.preferences.tsx",
      "parent": "/settings"
    },
    "/settings/": {
      "filePath": "settings.index.tsx",
      "parent": "/settings"
    }
  }
}
ROUTE_MANIFEST_END */
